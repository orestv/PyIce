#!/usr/bin/python2

import gtk, pygtk
import gobject
import threading
import time
from retriever import Retriever

class ClientWindow(gtk.Window):
    def __init__(self):
        super(ClientWindow, self).__init__()
        self.connect('destroy', gtk.main_quit)
        self._fCancel = None

        self._init_gui()



    def _init_gui(self):
        self.set_size_request(600, 400)
        self.set_position(gtk.WIN_POS_CENTER)
        bxMain = gtk.VBox()

        bxLogin = gtk.HBox()
        
        eHost = gtk.Entry()
        ePort = gtk.Entry()
        btnConnect = gtk.Button('Connect')

        eHost.set_text('213.130.28.169')
        ePort.set_text('30000')



        bxLogin.pack_start(gtk.Label('Host:'))
        bxLogin.pack_start(eHost)
        bxLogin.pack_start(gtk.Label('Port:'))
        bxLogin.pack_start(ePort)
        bxLogin.pack_start(btnConnect)

        bxMain.pack_start(bxLogin, expand=False, fill=False)

        tbl = gtk.Table(2,2,False)

        columns = [{'title': 'Artist - Title',
                'type': str},
               {'title': 'Length',
                'type': str},
               {'title': 'Path',
                'type': str}]

        self._lsPlaylist, self._tvPlaylist = \
                create_treeview(columns)

        sw = gtk.ScrolledWindow()
        sw.add(self._tvPlaylist)
        tbl.attach(sw, 0, 1, 0, 1)
        tbl.set_sensitive(False)

        bxMain.pack_start(tbl)


        self._sb = gtk.Statusbar()
        self._btnCancel = gtk.Button(stock=gtk.STOCK_CANCEL)
        self._btnCancel.set_sensitive(False)

        self._sb.pack_end(self._btnCancel, expand=False, fill=False)

        bxMain.pack_end(self._sb, expand=False, fill=False)

        def btnCancel_clicked(button):
            print 'btnCancel onclick handler!'
            if self._fCancel:
                self._fCancel()

        def btnConnect_clicked(button):
            host, port = eHost.get_text(), int(ePort.get_text())
            try:
                self._r = Retriever(host, port)
                bxLogin.set_sensitive(False)
                tbl.set_sensitive(True)
            except:
                print 'Connection refused'
                return
            self.download_collection()


        self._btnCancel.connect('clicked',  btnCancel_clicked)
        btnConnect.connect('clicked', btnConnect_clicked)

        self.add(bxMain)
        self.show_all()

    def download_collection(self):
        def f(fStopped):
            result = self._r.get_collection(fStopped)
            if not result:
                return False
            id, col = result
            print col
            list = [(c['tags']['artist'] + ' - ' + c['tags']['title'], '',
                    c['path']) for c in col]
            def f():
                for c in list:
                    self._lsPlaylist.append(c)
            gobject.idle_add(f)
            return True
        self._run(f, 'Success!', 'Fail!')


    def _run(self, func, msgSuccess, msgFail):
        class LocalThread(threading.Thread):
            def __init__(_self):
                threading.Thread.__init__(_self)
                self._e = threading.Event()

            def stopped(_self):
                return self._e.is_set()

            def stop(_self):
                print 'Thread stop() called.'
                self._e.set()

            def run(_self):
                print 'Thread run(), sleeping...'
                #time.sleep(3)
                print 'Thread run(), waking up.'

                result = func(_self.stopped)
                self._btnCancel.set_sensitive(False)
                self._fCancel = None

        t = LocalThread()

        def fCancel():
            t.stop()

        self._fCancel = fCancel
        self._btnCancel.set_sensitive(True)
        t.start()

def create_treeview(columns):
    tv = gtk.TreeView()
    ls = gtk.ListStore(*[col['type'] for col in columns])
    for i in range(len(columns)):
        col = columns[i]
        print col
        renderer = gtk.CellRendererText()
        c = gtk.TreeViewColumn(col['title'], renderer)
        tv.append_column(c)
        c.add_attribute(renderer, 'text', i)
        tv.set_model(ls)
    return ls, tv


if __name__ == '__main__':
    gtk.gdk.threads_init()
    c = ClientWindow()
    gtk.main()
