#!/usr/bin/python2

import gtk, pygtk
import gobject
import threading
import time
from retriever import Retriever

class ClientWindow(gtk.Window):
    def __init__(self):
        super(ClientWindow, self).__init__()

        self.connect('destroy', self.on_destroy)
        self._current_song = None
        self._current_song_lock = threading.Lock()
        self._lsThreads = []

        self._init_gui()

    def _init_gui(self):
        def set_button_icon(button, stock):
            img = gtk.Image()
            img.set_from_stock(stock, gtk.ICON_SIZE_BUTTON)
            button.add(img)
        self.set_size_request(800, 400)
        self.set_position(gtk.WIN_POS_CENTER)
        bxMain = gtk.VBox()

        bxLogin = gtk.HBox()
        
        eHost = gtk.Entry()
        ePort = gtk.Entry()
        btnConnect = gtk.Button('Connect')

        eHost.set_text('213.130.28.169')
        ePort.set_text('30000')

        bxLogin.pack_start(gtk.Label('Host:'))
        bxLogin.pack_start(eHost)
        bxLogin.pack_start(gtk.Label('Port:'))
        bxLogin.pack_start(ePort)
        bxLogin.pack_start(btnConnect)

        bxMain.pack_start(bxLogin, expand=False, fill=False)

        self._lblCurrentSong = gtk.Label()
        self._lblCountdown = gtk.Label()
        bxCurrent = gtk.HBox()

        bxCurrent.pack_start(gtk.Label('Currently playing:'))
        bxCurrent.pack_start(self._lblCurrentSong)
        bxCurrent.pack_start(gtk.Label('Ends in '))
        bxCurrent.pack_start(self._lblCountdown)

        bxMain.pack_start(bxCurrent, expand=False, fill=False, padding=15)

        tbl = gtk.Table(3,5,False)

        columns = [{'title': 'Path',
                    'type': str, 'visible': False},
                   {'title': 'Song',
                    'type': str, 'visible': True},
                   {'title': 'Length',
                    'type': str, 'visible': True}
                  ]

        self._tsCollection, self._tvCollection = \
                create_treeview(columns, True)
        self._tvCollection.enable_model_drag_source(
            gtk.gdk.BUTTON1_MASK,[('text/plain', 0, 0)],
            gtk.gdk.ACTION_DEFAULT|gtk.gdk.ACTION_COPY)

        def collection_drag_data_get(treeview, context, selection, info, timestamp):
            sel = treeview.get_selection()
            model, iter = sel.get_selected()
            data = model.get_value(iter, 0)
            selection.set(selection.target, 8, data)
            return

        self._tvCollection.connect('drag-data-get', collection_drag_data_get)

        columns = [{'title': 'Path',
                    'type': str, 'visible': False},
                   {'title': 'Artist',
                    'type': str, 'visible': True},
                   {'title': 'Title',
                    'type': str, 'visible': True},
                   {'title': 'Length',
                    'type': str, 'visible': True},
                   {'title': 'Start time',
                    'type': str, 'visible': True},
                   {'title': 'End time',
                    'type': str, 'visible': True}
                  ]
        
        self._lsPlaylist, self._tvPlaylist = \
                create_treeview(columns)
        self._tvPlaylist.set_reorderable(True)
        self._lsPlaylist._deleted_at = None

        self._tvPlaylist.enable_model_drag_dest(
            [('text/plain', 0, 0)],
            gtk.gdk.ACTION_DEFAULT|gtk.gdk.ACTION_COPY|gtk.gdk.ACTION_MOVE)
        self._tvPlaylist.enable_model_drag_source(
            gtk.gdk.BUTTON1_MASK, [('text/plain',0,0)],
            gtk.gdk.ACTION_MOVE)
        self._lsPlaylist._deleted_handle =\
            self._lsPlaylist.connect('row-deleted', self.playlist_row_deleted)


        def drag_data_received(treeview, context, x, y, selection, info,
                               timestamp):
            drop_info = treeview.get_dest_row_at_pos(x, y)
            model = treeview.get_model()

            from_path = model._deleted_at
            if from_path:
                model._deleted_at = None
                from_index = from_path[0]
            data = selection.data

            if not data:
                return
            if not drop_info:
                index, position = None, None
            else:
                index, position = drop_info
            if not index:
                nSongs = model.iter_n_children(None)
                index = nSongs
            else:
                index = index[0]
                if position in (gtk.TREE_VIEW_DROP_AFTER,
                                gtk.TREE_VIEW_DROP_INTO_OR_AFTER):
                    index += 1
            if from_path and from_index < index:
                index -= 1

            self._r.insert_songs(index, (data,))
            self.update_playlist()
            return

        def playlist_drag_data_get(treeview, context, selection, info, timestamp):
            sel = treeview.get_selection()
            model, iter = sel.get_selected()
            path = model.get_path(iter)

            model._deleted_at = path

            data = model.get_value(iter, 0)
            selection.set(selection.target, 8, data)
            model.remove(iter)
            return

        self._tvPlaylist.connect('drag-data-received', drag_data_received)
        self._tvPlaylist.connect('drag-data-get', playlist_drag_data_get)

        btnReloadCollection = gtk.Button()
        set_button_icon(btnReloadCollection, gtk.STOCK_REFRESH)

        def btnReloadCollection_clicked(button):
            self.download_collection()

        btnReloadCollection.connect('clicked', btnReloadCollection_clicked)

        sw = gtk.ScrolledWindow()
        sw.add(self._tvCollection)
        tbl.attach(gtk.Label('Collection'), 0, 1, 0, 1, 0, 0)
        tbl.attach(btnReloadCollection, 1, 2, 0, 1, 0, 0)
        tbl.attach(sw, 0, 2, 1, 2)

        def tvCollection_row_activated(view, row, column):
            iter = self._tsCollection.get_iter(row)
            path = self._tsCollection.get_value(iter, 0)
            self._r.set_next_song(path)
            self.update_playlist()

        self._tvCollection.connect('row-activated', tvCollection_row_activated)

        btnReloadPlaylist = gtk.Button()
        set_button_icon(btnReloadPlaylist, gtk.STOCK_REFRESH)

        def btnReloadPlaylist_clicked(button):
            self.update_playlist()

        btnReloadPlaylist.connect('clicked', btnReloadPlaylist_clicked)

        sw = gtk.ScrolledWindow()
        sw.add(self._tvPlaylist)
        tbl.attach(gtk.Label('Playlist'), 2, 3, 0, 1, 0, 0)
        tbl.attach(btnReloadPlaylist, 3, 4, 0, 1, 0, 0)
        tbl.attach(sw, 2, 4, 1, 2)

        btnReloadOptions = gtk.Button()
        set_button_icon(btnReloadOptions, gtk.STOCK_REFRESH)

        btnReloadOptions.connect('clicked', lambda button: self.fetch_options())
        tbl.attach(btnReloadOptions, 4, 5, 0, 1, 0, 0)

        tblOpts = gtk.Table(6, 3, False)

        self._eBufSize = gtk.Entry()
        btnSetBufSize = gtk.Button('Set')
        def btnSetBufSize_clicked(button):
            def f():
                try:
                    gobject.idle_add(lambda: button.set_sensitive(False))
                    nBufferSize = int(self._eBufSize.get_text())
                    ret = self._r.set_buffer_size(nBufferSize)
                except:
                    print 'fuck! Exception'
                finally:
                    gobject.idle_add(lambda:button.set_sensitive(True))
            threading.Thread(target=f).start()
        btnSetBufSize.connect('clicked', btnSetBufSize_clicked)

        tblOpts.attach(gtk.Label('Buffer size'), 0, 1, 0, 1, yoptions=0)
        tblOpts.attach(self._eBufSize, 1, 2, 0, 1, yoptions=0, xoptions=0)
        tblOpts.attach(btnSetBufSize, 2, 3, 0, 1, yoptions=0)



        tbl.attach(tblOpts, 4, 5, 1, 2)

        tbl.set_sensitive(False)

        bxMain.pack_start(tbl)

        self._status = gtk.VBox()
        bxMain.pack_end(self._status, expand=False, fill=False)

        def btnConnect_clicked(button):
            host, port = eHost.get_text(), int(ePort.get_text())
            try:
                self._r = Retriever(host, port)
                bxLogin.set_sensitive(False)
                tbl.set_sensitive(True)
            except:
                print 'Connection refused'
                return
            self.download_collection()
            self.update_playlist()
            self.update_current_song()
            self.start_counter()
            self.fetch_options()


        btnConnect.connect('clicked', btnConnect_clicked)

        self.add(bxMain)
        self.show_all()

    def fetch_options(self):
        def f():
            nBufSize = self._r.get_buffer_size()
            gobject.idle_add(lambda: self._eBufSize.set_text(str(nBufSize)))

        threading.Thread(target=f).start()

    def playlist_row_deleted(self, model, path):
        self._r.delete_songs(list(path))
        #self.update_playlist()

    def update_current_song(self):

        #def fUpdateSong(fStopped):
        with self._current_song_lock:
            self._current_song = self._r.get_current_song()
        if self._current_song:
            def f():
                self._lblCurrentSong.set_text(self._current_song['artist']+' - '\
                                              +self._current_song['title'])
            gobject.idle_add(f)

        #tSong = LocalThread(self, fUpdateSong)
        #tSong.start()


    def start_counter(self):
        def update_counter(text):
            self._lblCountdown.set_text(text)

        def fUpdateCounter(fStopped):
            nMax = 25
            nCount = nMax
            while 1:
                while 1:
                    nCount += 1
                    if fStopped():
                        return
                    if nCount >= nMax:
                        nCount = 0
                        self.update_current_song()
                    timer = self._r.get_time_to_end(fStopped)
                    if fStopped():
                        return
                    if timer < 0:
                        nCount = nMax
                        break
                    t = format_length(timer)
                    gobject.idle_add(update_counter, t)

                    time.sleep(0.1)
                        #self.update_playlist()
                with self._current_song_lock:
                    s = self._current_song
                    s1 = self._r.get_current_song()
                    while s1 == s:
                        if fStopped():
                            return
                        s1 = self._r.get_current_song()
                        time.sleep(0.5)
                self.update_current_song()
                t = self.update_playlist()
                #t.join()

        tCounter = LocalThread(self, fUpdateCounter)
        tCounter.start()


    def download_collection(self):
        def f(fStopped, fUpdate):
            result = self._r.get_collection(fStopped, fUpdate)
            if not result:
                return False
            col = result
            self._tvCollection.set_model(None)
            for artist in col:
                rwArtist = self._tsCollection.append(None, 
                                                ['', artist, ''])
                for album in col[artist]:
                    rwAlbum = self._tsCollection.append(rwArtist,
                                                        ['', album, ''])
                    for song in col[artist][album]:
                        self._tsCollection.append(rwAlbum,
                                                  [song['path'], song['title'],
                                                  format_length(song['length'])])
            fUpdate(1.)
            self._tvCollection.set_model(self._tsCollection)
            return True
        return self._run(f, 'Downloading collection...', \
                  'Collection downloaded successfully!', \
                  'Failed to download collection!', True)

    def update_playlist(self):
        def f(fStopped, fUpdate):
            self._lsPlaylist.disconnect(self._lsPlaylist._deleted_handle)
            result = self._r.get_playlist(fStopped, fUpdate)
            if not result:
                self._tvPlaylist.set_sensitive(True)
                return False
            pl = result
            def fGUI():
                #next song will start as soon as the curent ends
                start_time = self._current_song['end_time'] 
                self._tvPlaylist.set_sensitive(False)
                self._tvPlaylist.set_model(None)
                self._lsPlaylist.clear()
                for c in pl:
                    self._lsPlaylist.append(
                        [c['path'], c['tags']['artist'], c['tags']['title'],
                         format_length(c['length']), 
                         format_time(start_time), 
                         format_time(c['length']+start_time)])
                    start_time += c['length']

                self._tvPlaylist.set_model(self._lsPlaylist)
                self._tvPlaylist.set_sensitive(True)
                self._lsPlaylist._deleted_handle =\
                    self._lsPlaylist.connect('row-deleted', self.playlist_row_deleted)
            gobject.idle_add(fGUI)
            return True

        return self._run(f, 'Downloading playlist...', \
                  'Playlist downloaded successfully!', \
                  'Failed to download playlist!', True)

    def _run(self, func, msgStatus, msgSuccess, msgFail, bProgress=False):
        box = gtk.HBox()
        lblStatus = gtk.Label(msgStatus)
        btnCancel = gtk.Button(stock=gtk.STOCK_CANCEL)
        box.pack_start(lblStatus)

        if bProgress:
            pgStatus = gtk.ProgressBar()
            pgStatus.set_fraction(0.)

            def fProgress(n):
                def f(x):
                    pgStatus.set_fraction(n)
                    pgStatus.set_text('%2.2f%%' % (n*100,))
                gobject.idle_add(f, n)

            box.pack_start(pgStatus)

        box.pack_start(btnCancel)

        self._status.pack_start(box)
        box.show_all()

        def fTarget(fStopped):
            if bProgress:
                result = func(fStopped, fProgress)
            else:
                result = func(fStopped)
            if result:
                lblStatus.set_text(msgSuccess)
            else:
                lblStatus.set_text(msgFail)
            btnCancel.set_sensitive(False)
            try:
                for i in range(200):
                    time.sleep(0.01)
            except:
                if fStopped and fStopped():
                    return
            box.destroy()

        t = LocalThread(self, fTarget)

        def btnCancel_clicked(button):
            t.stop()

        btnCancel.connect('clicked', btnCancel_clicked)

        t.start()
        return t

    def add_thread(self, thread):
        self._lsThreads.append(thread)

    def remove_thread(self, thread):
        self._lsThreads.remove(thread)

    def on_destroy(self, event):
        for thread in self._lsThreads:
            print 'Stopping an orphaned thread...'
            thread.stop()
            #thread.join()
            print 'Thread stopped'
        gtk.main_quit()

def create_treeview(columns, tree=False):
    tv = gtk.TreeView()
    if tree:
        ls = gtk.TreeStore(*[col['type'] for col in columns])
    else:
        ls = gtk.ListStore(*[col['type'] for col in columns])
    for i in range(len(columns)):
        col = columns[i]
        renderer = gtk.CellRendererText()
        c = gtk.TreeViewColumn(col['title'], renderer)
        c.set_resizable(True)
        c.set_expand(False)
        if not col['visible']:
            c.set_visible(False)
        tv.append_column(c)
        c.add_attribute(renderer, 'text', i)
        tv.set_model(ls)
    return ls, tv

class LocalThread(threading.Thread):
    def __init__(self, window, target):
        threading.Thread.__init__(self)
        self._window = window
        self._e = threading.Event()
        self._target = target

    def stopped(self):
        return self._e.is_set()

    def stop(self):
        print 'Thread stop() called.'
        self._e.set()

    def run(self):
        self._window.add_thread(self)
        self._target(self.stopped)
        self._window.remove_thread(self)

def format_length(length):
    t = time.strftime('%M:%S', time.localtime(length))
    return t

def format_time(length):
    t = time.strftime('%H:%M:%S', time.localtime(length))
    return t

if __name__ == '__main__':
    gtk.gdk.threads_init()
    c = ClientWindow()
    gtk.main()
