#!/usr/bin/python2

import gtk, pygtk
import gobject

class ClientWindow(gtk.Window):
    def __init__(self):
        super(ClientWindow, self).__init__()
        self.connect('destroy', self.destroy)
        self._create_gui()

    def _create_gui(self):
        self.set_size_request(800, 600)
        self.set_position(gtk.WIN_POS_CENTER)

        self.add(self._create_window_toplevel())        

        self.show_all()

    def _create_window_toplevel(self):
        tbl = gtk.Table(2,2,False)
        tbl.set_col_spacings(5)
        tbl.set_row_spacings(5)

        self._tvPlaylist, self._lsPlaylist = self.create_playlist_view()
        self._tvCollection, self._lsCollection = self.create_collection_view()

        tbl.attach(self._tvPlaylist, 0, 1, 0, 1)
        tbl.attach(self._tvCollection, 1, 2, 0, 1)

        return tbl


    def create_collection_view(self):
        tvCollection = gtk.TreeView()

        columns = [{'title': 'Song', 'type': str},
                   {'title': 'Length', 'type': str}]

        col_types = [x['type'] for x in columns]

        print col_types
        lsCollection = gtk.ListStore(*col_types)

        for i in range(len(columns)):
            col = columns[i]
            renderer = gtk.CellRendererText()
            c = gtk.TreeViewColumn(col['title'], renderer)
            tvCollection.append_column(c)
            c.add_attribute(renderer, 'text', i)

        tvCollection.set_model(lsCollection)

        return tvCollection, lsCollection

    def create_playlist_view(self):
        tvPlaylist = gtk.TreeView()

        columns = [{'title': 'Song', 'type': str},
                   {'title': 'Length', 'type': str}]

        col_types = [x['type'] for x in columns]

        print col_types
        lsPlaylist = gtk.ListStore(*col_types)

        for i in range(len(columns)):
            col = columns[i]
            renderer = gtk.CellRendererText()
            c = gtk.TreeViewColumn(col['title'], renderer)
            tvPlaylist.append_column(c)
            c.add_attribute(renderer, 'text', i)

        tvPlaylist.set_model(lsPlaylist)

        return tvPlaylist, lsPlaylist


    def destroy(self, widget):
        gtk.main_quit()


if __name__ == '__main__':
    c = ClientWindow()
    gobject.threads_init()
    gtk.main()

